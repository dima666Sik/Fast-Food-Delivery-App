services:
  # The microservices that will be run
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8083:8083"

  api-gateway-auth-service:
    build:
      context: .
      dockerfile: api-gateway-auth-service/Dockerfile
    container_name: api-gateway-auth-service
    ports:
      - "8080:8080"
    depends_on:
      - postgres-user-info
      - eureka-server

  chat-helper-ai-service:
    build:
      context: ./chat-helper-ai-service
      dockerfile: Dockerfile
    container_name: chat-helper-ai-service
    ports:
      - "8165:8165"
    depends_on:
      - eureka-server

  email-sender-service:
    build:
      context: ./email-sender-service
      dockerfile: Dockerfile
    container_name: email-sender-service
    ports:
      - "8097:8097"
    depends_on:
      - eureka-server
      - rabbitmq

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - rabbitmq
      - postgres-order-info

  product-service:
    build:
      context: .
      dockerfile: product-service/Dockerfile
    container_name: product-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - postgres-product-info

  stripe-integration-service:
    build:
      context: ./stripe-integration-service
      dockerfile: Dockerfile
    container_name: stripe-integration-service
    ports:
      - "8156:8156"
    depends_on:
      - eureka-server
  
  
  # The program resources that we needed
  postgres-user-info:
    container_name: postgres-user-info
    image: postgres
    volumes:
      - postgres-user-info-data:/data/postgres
    environment:
      POSTGRES_USER: dimasik666
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users_info_db
    ports:
      - "5433:5432"
    restart: unless-stopped

  postgres-order-info:
    container_name: postgres-order-info
    image: postgres
    volumes:
      - postgres-order-info-data:/data/postgres
    environment:
      POSTGRES_USER: dimasik666
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orders_info_db
    ports:
      - "5435:5432"
    restart: unless-stopped

  postgres-product-info:
    container_name: postgres-product-info
    image: postgres
    volumes:
      - postgres-product-info-data:/data/postgres
    environment:
      POSTGRES_USER: dimasik666
      POSTGRES_PASSWORD: password
      POSTGRES_DB: products_info_db
    ports:
      - "5434:5432"
    restart: unless-stopped

    # pgAdmin Service
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80" # Expose port for pgAdmin
    depends_on:
      - postgres-user-info

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./order-service/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./order-service/definitions.json:/etc/rabbitmq/definitions.json
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

volumes:
  postgres-order-info-data:
  postgres-user-info-data:
  postgres-product-info-data: